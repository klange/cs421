type token =
  | INT of (int)
  | FLOAT of (float)
  | BOOL of (bool)
  | STRING of (string)
  | IDENT of (string)
  | OPCOM of ((int*int))
  | CLCOM of ((int*int))
  | SCLCOM of ((int*int))
  | DBLSEMI
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | DPLUS
  | DMINUS
  | DTIMES
  | DDIV
  | CARAT
  | EXP
  | LT
  | GEQ
  | LEQ
  | GT
  | EQUALS
  | AND
  | OR
  | PIPE
  | ARROW
  | DCOLON
  | LET
  | REC
  | SEMI
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | LBRAC
  | RBRAC
  | LPAREN
  | RPAREN
  | COMMA
  | UNIT
  | ERROR
  | EOF
  | TRY
  | WITH
  | UNDERSCORE
  | RAISE
  | HEAD
  | TAIL
  | PRINT
  | NEG
  | FST
  | SND

open Parsing;;
# 3 "student.mly"
    open Mp8common
# 62 "student.ml"
let yytransl_const = [|
  265 (* DBLSEMI *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIV *);
  270 (* DPLUS *);
  271 (* DMINUS *);
  272 (* DTIMES *);
  273 (* DDIV *);
  274 (* CARAT *);
  275 (* EXP *);
  276 (* LT *);
  277 (* GEQ *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* EQUALS *);
  281 (* AND *);
  282 (* OR *);
  283 (* PIPE *);
  284 (* ARROW *);
  285 (* DCOLON *);
  286 (* LET *);
  287 (* REC *);
  288 (* SEMI *);
  289 (* IN *);
  290 (* IF *);
  291 (* THEN *);
  292 (* ELSE *);
  293 (* FUN *);
  294 (* LBRAC *);
  295 (* RBRAC *);
  296 (* LPAREN *);
  297 (* RPAREN *);
  298 (* COMMA *);
  299 (* UNIT *);
  300 (* ERROR *);
    0 (* EOF *);
  301 (* TRY *);
  302 (* WITH *);
  303 (* UNDERSCORE *);
  304 (* RAISE *);
  305 (* HEAD *);
  306 (* TAIL *);
  307 (* PRINT *);
  308 (* NEG *);
  309 (* FST *);
  310 (* SND *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* IDENT *);
  262 (* OPCOM *);
  263 (* CLCOM *);
  264 (* SCLCOM *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\005\000\005\000\008\000\008\000\006\000\
\006\000\006\000\006\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\001\000\001\000\002\000\005\000\007\000\001\000\003\000\005\000\
\002\000\003\000\001\000\001\000\006\000\008\000\002\000\004\000\
\006\000\001\000\002\000\001\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\044\000\045\000\043\000\046\000\042\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\006\000\011\000\012\000\018\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\019\000\000\000\056\000\021\000\032\000\022\000\023\000\024\000"

let yysindex = "\002\000\
\108\002\000\000\000\000\000\000\000\000\000\000\000\000\252\254\
\129\002\255\254\029\255\129\002\000\000\129\002\129\002\129\002\
\129\002\129\002\000\000\008\000\000\000\000\000\000\000\000\000\
\237\254\001\255\253\254\062\000\235\254\000\000\116\000\226\254\
\102\255\200\002\130\001\130\001\130\001\130\001\000\000\129\002\
\129\002\129\002\129\002\129\002\129\002\129\002\129\002\129\002\
\129\002\129\002\129\002\129\002\129\002\129\002\129\002\200\002\
\129\002\007\255\250\254\014\255\129\002\129\002\129\002\000\000\
\000\000\129\002\054\002\054\002\183\002\183\002\054\002\054\002\
\183\002\183\002\036\002\036\002\036\002\036\002\130\001\238\001\
\184\001\130\001\156\255\254\254\129\002\015\255\170\000\130\001\
\000\000\224\000\000\000\129\002\129\002\022\001\000\255\129\002\
\000\000\130\001\210\255\129\002\130\001\000\000\129\002\076\001\
\130\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\238\254\000\000\
\000\000\030\003\082\002\209\004\220\004\234\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\200\003\234\003\064\003\098\003\012\004\046\004\
\132\003\166\003\075\004\104\004\133\004\162\004\245\004\180\004\
\198\004\000\005\000\000\000\000\000\000\000\000\000\000\014\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\005\000\000\000\000\036\005\000\000\000\000\000\000\
\050\005"

let yygindex = "\000\000\
\000\000\000\000\255\255\000\000\216\255\000\000\000\000\000\000"

let yytablesize = 1628
let yytable = "\020\000\
\025\000\059\000\001\000\029\000\057\000\058\000\062\000\028\000\
\064\000\031\000\033\000\084\000\034\000\035\000\036\000\037\000\
\038\000\085\000\086\000\095\000\020\000\093\000\089\000\100\000\
\000\000\000\000\026\000\060\000\000\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\000\000\083\000\
\000\000\000\000\027\000\087\000\088\000\031\000\009\000\000\000\
\090\000\010\000\011\000\030\000\012\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\014\000\015\000\016\000\000\000\
\000\000\017\000\018\000\094\000\000\000\000\000\000\000\000\000\
\000\000\000\000\098\000\099\000\000\000\000\000\101\000\000\000\
\000\000\000\000\104\000\000\000\000\000\105\000\003\000\004\000\
\005\000\006\000\007\000\000\000\000\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\000\000\000\000\055\000\027\000\000\000\000\000\000\000\009\000\
\000\000\000\000\010\000\011\000\000\000\012\000\065\000\066\000\
\013\000\000\000\000\000\000\000\000\000\014\000\015\000\016\000\
\000\000\000\000\017\000\018\000\003\000\004\000\005\000\006\000\
\007\000\000\000\000\000\000\000\091\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\000\000\
\055\000\027\000\000\000\000\000\092\000\009\000\000\000\000\000\
\010\000\011\000\000\000\012\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\014\000\015\000\016\000\000\000\000\000\
\017\000\018\000\003\000\004\000\005\000\006\000\007\000\000\000\
\000\000\000\000\102\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\000\000\000\000\055\000\027\000\
\000\000\000\000\103\000\009\000\000\000\000\000\010\000\011\000\
\000\000\012\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\014\000\015\000\016\000\000\000\000\000\017\000\018\000\
\003\000\004\000\005\000\006\000\007\000\000\000\000\000\000\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\000\000\000\000\055\000\027\000\000\000\000\000\
\000\000\009\000\000\000\000\000\010\000\011\000\000\000\012\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\014\000\
\015\000\016\000\000\000\000\000\017\000\018\000\003\000\004\000\
\005\000\006\000\007\000\000\000\000\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\000\000\000\000\055\000\027\000\000\000\000\000\000\000\009\000\
\061\000\000\000\010\000\011\000\000\000\012\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\014\000\015\000\016\000\
\000\000\000\000\017\000\018\000\003\000\004\000\005\000\006\000\
\007\000\000\000\000\000\000\000\000\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\000\000\
\055\000\027\000\000\000\063\000\000\000\009\000\000\000\000\000\
\010\000\011\000\000\000\012\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\014\000\015\000\016\000\000\000\000\000\
\017\000\018\000\003\000\004\000\005\000\006\000\007\000\000\000\
\000\000\000\000\000\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\000\000\000\000\055\000\027\000\
\000\000\000\000\000\000\009\000\000\000\096\000\010\000\011\000\
\000\000\012\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\014\000\015\000\016\000\000\000\000\000\017\000\018\000\
\003\000\004\000\005\000\006\000\007\000\000\000\000\000\000\000\
\000\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\000\000\000\000\055\000\027\000\000\000\000\000\
\000\000\009\000\000\000\000\000\010\000\011\000\000\000\012\000\
\097\000\000\000\013\000\000\000\000\000\000\000\000\000\014\000\
\015\000\016\000\000\000\000\000\017\000\018\000\003\000\004\000\
\005\000\006\000\007\000\000\000\000\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\000\000\000\000\055\000\027\000\000\000\000\000\092\000\009\000\
\000\000\000\000\010\000\011\000\000\000\012\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\014\000\015\000\016\000\
\000\000\000\000\017\000\018\000\003\000\004\000\005\000\006\000\
\007\000\000\000\000\000\000\000\000\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\000\000\
\055\000\027\000\000\000\000\000\103\000\009\000\000\000\000\000\
\010\000\011\000\000\000\012\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\014\000\015\000\016\000\000\000\000\000\
\017\000\018\000\003\000\004\000\005\000\006\000\007\000\000\000\
\000\000\000\000\000\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\000\000\000\000\055\000\027\000\
\000\000\000\000\000\000\009\000\000\000\000\000\010\000\011\000\
\000\000\012\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\014\000\015\000\016\000\000\000\000\000\017\000\018\000\
\003\000\004\000\005\000\006\000\007\000\000\000\000\000\000\000\
\000\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\012\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\014\000\
\015\000\016\000\000\000\000\000\017\000\018\000\003\000\004\000\
\005\000\006\000\007\000\000\000\000\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\000\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\012\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\014\000\015\000\016\000\
\000\000\000\000\017\000\018\000\003\000\004\000\005\000\006\000\
\007\000\000\000\000\000\000\000\000\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\003\000\004\000\
\005\000\006\000\007\000\052\000\000\000\000\000\000\000\000\000\
\055\000\042\000\043\000\000\000\000\000\046\000\047\000\000\000\
\000\000\011\000\000\000\012\000\000\000\052\000\013\000\000\000\
\000\000\000\000\055\000\014\000\015\000\016\000\000\000\000\000\
\017\000\018\000\024\000\011\000\000\000\012\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\014\000\015\000\016\000\
\000\000\000\000\017\000\018\000\003\000\004\000\005\000\006\000\
\007\000\024\000\024\000\000\000\024\000\024\000\000\000\000\000\
\024\000\000\000\024\000\024\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\005\000\006\000\007\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\009\000\000\000\000\000\
\010\000\011\000\000\000\012\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\014\000\015\000\016\000\027\000\000\000\
\017\000\018\000\009\000\000\000\000\000\010\000\011\000\000\000\
\012\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\014\000\015\000\016\000\000\000\000\000\017\000\018\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\004\000\005\000\006\000\007\000\000\000\052\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\012\000\052\000\
\000\000\013\000\000\000\000\000\055\000\000\000\014\000\015\000\
\016\000\000\000\000\000\017\000\018\000\011\000\000\000\012\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\015\000\016\000\000\000\000\000\017\000\018\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
\000\000\015\000\015\000\015\000\015\000\000\000\015\000\015\000\
\000\000\000\000\000\000\015\000\000\000\015\000\015\000\015\000\
\015\000\015\000\015\000\000\000\015\000\000\000\015\000\015\000\
\000\000\000\000\000\000\000\000\000\000\015\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
\000\000\019\000\019\000\019\000\019\000\000\000\019\000\019\000\
\000\000\000\000\000\000\019\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\019\000\000\000\019\000\019\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\000\000\000\000\031\000\031\000\031\000\031\000\000\000\
\031\000\031\000\000\000\000\000\000\000\031\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\031\000\000\000\
\031\000\031\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\000\000\000\000\030\000\030\000\030\000\
\030\000\000\000\030\000\030\000\000\000\000\000\000\000\030\000\
\000\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
\030\000\000\000\030\000\030\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\035\000\
\035\000\035\000\035\000\000\000\035\000\035\000\000\000\000\000\
\000\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\035\000\000\000\035\000\035\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\000\000\
\000\000\034\000\034\000\034\000\034\000\000\000\034\000\034\000\
\000\000\000\000\000\000\034\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\034\000\000\000\034\000\034\000\
\028\000\028\000\028\000\000\000\000\000\028\000\028\000\000\000\
\000\000\000\000\000\000\028\000\028\000\028\000\028\000\000\000\
\028\000\028\000\000\000\000\000\000\000\028\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\000\000\028\000\000\000\
\028\000\028\000\029\000\029\000\029\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\000\000\029\000\029\000\029\000\
\029\000\000\000\029\000\029\000\000\000\000\000\000\000\029\000\
\000\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\029\000\000\000\029\000\029\000\032\000\032\000\032\000\000\000\
\000\000\032\000\032\000\000\000\000\000\000\000\000\000\032\000\
\032\000\032\000\032\000\000\000\032\000\032\000\000\000\000\000\
\000\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\000\000\032\000\000\000\032\000\032\000\033\000\033\000\
\033\000\000\000\000\000\033\000\033\000\000\000\000\000\000\000\
\000\000\033\000\033\000\033\000\033\000\000\000\033\000\033\000\
\000\000\000\000\000\000\033\000\000\000\033\000\033\000\033\000\
\033\000\033\000\033\000\036\000\033\000\000\000\033\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\000\000\036\000\036\000\000\000\000\000\000\000\
\036\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\040\000\036\000\000\000\036\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\040\000\040\000\040\000\000\000\
\040\000\040\000\000\000\000\000\000\000\040\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\039\000\040\000\000\000\
\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\039\000\039\000\039\000\000\000\039\000\039\000\000\000\
\000\000\000\000\039\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\037\000\039\000\000\000\039\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\037\000\037\000\
\037\000\000\000\037\000\037\000\022\000\000\000\000\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
\037\000\000\000\037\000\037\000\022\000\022\000\023\000\000\000\
\000\000\022\000\000\000\022\000\022\000\022\000\022\000\022\000\
\022\000\025\000\022\000\000\000\022\000\022\000\000\000\023\000\
\000\000\000\000\000\000\023\000\026\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\000\000\023\000\023\000\
\025\000\025\000\027\000\025\000\025\000\000\000\000\000\025\000\
\000\000\025\000\025\000\026\000\026\000\038\000\026\000\026\000\
\000\000\000\000\026\000\000\000\026\000\026\000\000\000\000\000\
\041\000\027\000\027\000\000\000\027\000\027\000\000\000\000\000\
\027\000\000\000\027\000\027\000\038\000\038\000\016\000\038\000\
\038\000\000\000\000\000\038\000\000\000\038\000\038\000\041\000\
\041\000\013\000\041\000\041\000\000\000\000\000\041\000\000\000\
\041\000\041\000\000\000\000\000\017\000\016\000\016\000\000\000\
\016\000\016\000\000\000\000\000\016\000\000\000\016\000\016\000\
\013\000\013\000\014\000\013\000\013\000\000\000\000\000\013\000\
\000\000\013\000\013\000\017\000\017\000\000\000\017\000\017\000\
\000\000\000\000\017\000\000\000\017\000\017\000\000\000\000\000\
\000\000\014\000\014\000\000\000\014\000\014\000\000\000\000\000\
\014\000\000\000\014\000\014\000"

let yycheck = "\001\000\
\005\001\005\001\001\000\005\001\024\001\005\001\028\001\009\000\
\039\001\011\000\012\000\005\001\014\000\015\000\016\000\017\000\
\018\000\024\001\005\001\005\001\039\001\024\001\063\000\024\001\
\255\255\255\255\031\001\031\001\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\255\255\057\000\
\255\255\255\255\030\001\061\000\062\000\063\000\034\001\255\255\
\066\000\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\255\255\
\255\255\053\001\054\001\085\000\255\255\255\255\255\255\255\255\
\255\255\255\255\092\000\093\000\255\255\255\255\096\000\255\255\
\255\255\255\255\100\000\255\255\255\255\103\000\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\034\001\
\255\255\255\255\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\255\255\
\037\001\038\001\255\255\040\001\255\255\255\255\043\001\255\255\
\255\255\255\255\255\255\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\034\001\255\255\255\255\037\001\038\001\
\255\255\040\001\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\048\001\049\001\050\001\255\255\255\255\053\001\054\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\034\001\255\255\255\255\037\001\038\001\255\255\040\001\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\048\001\
\049\001\050\001\255\255\255\255\053\001\054\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\034\001\
\035\001\255\255\037\001\038\001\255\255\040\001\255\255\255\255\
\043\001\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\034\001\255\255\255\255\
\037\001\038\001\255\255\040\001\255\255\255\255\043\001\255\255\
\255\255\255\255\255\255\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\034\001\255\255\036\001\037\001\038\001\
\255\255\040\001\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\048\001\049\001\050\001\255\255\255\255\053\001\054\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\034\001\255\255\255\255\037\001\038\001\255\255\040\001\
\041\001\255\255\043\001\255\255\255\255\255\255\255\255\048\001\
\049\001\050\001\255\255\255\255\053\001\054\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\255\255\037\001\038\001\255\255\040\001\255\255\255\255\
\043\001\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\255\255\
\037\001\038\001\255\255\040\001\255\255\255\255\043\001\255\255\
\255\255\255\255\255\255\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\034\001\255\255\255\255\037\001\038\001\
\255\255\040\001\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\048\001\049\001\050\001\255\255\255\255\053\001\054\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\255\255\040\001\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\048\001\
\049\001\050\001\255\255\255\255\053\001\054\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\255\255\040\001\255\255\255\255\
\043\001\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\001\001\002\001\
\003\001\004\001\005\001\024\001\255\255\255\255\255\255\255\255\
\029\001\012\001\013\001\255\255\255\255\016\001\017\001\255\255\
\255\255\038\001\255\255\040\001\255\255\024\001\043\001\255\255\
\255\255\255\255\029\001\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\009\001\038\001\255\255\040\001\255\255\255\255\
\043\001\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\001\001\002\001\003\001\004\001\
\005\001\032\001\033\001\255\255\035\001\036\001\255\255\255\255\
\039\001\255\255\041\001\042\001\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\030\001\255\255\255\255\255\255\034\001\255\255\255\255\
\037\001\038\001\255\255\040\001\255\255\255\255\043\001\255\255\
\255\255\255\255\255\255\048\001\049\001\050\001\030\001\255\255\
\053\001\054\001\034\001\255\255\255\255\037\001\038\001\255\255\
\040\001\255\255\255\255\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\255\255\255\255\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\024\001\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001\255\255\040\001\024\001\
\255\255\043\001\255\255\255\255\029\001\255\255\048\001\049\001\
\050\001\255\255\255\255\053\001\054\001\038\001\255\255\040\001\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\255\255\255\255\053\001\054\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\255\255\041\001\042\001\
\255\255\255\255\255\255\255\255\255\255\048\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\255\255\041\001\042\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\255\255\
\041\001\042\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\255\255\255\255\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\255\255\041\001\042\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\255\255\041\001\042\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\255\255\041\001\042\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\255\255\
\041\001\042\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\255\255\255\255\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\255\255\041\001\042\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\255\255\041\001\042\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\009\001\039\001\255\255\041\001\042\001\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\255\255\
\030\001\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\009\001\039\001\255\255\041\001\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\009\001\039\001\255\255\
\041\001\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\009\001\039\001\255\255\041\001\042\001\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\009\001\255\255\255\255\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\255\255\041\001\042\001\025\001\026\001\009\001\255\255\
\255\255\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\009\001\039\001\255\255\041\001\042\001\255\255\026\001\
\255\255\255\255\255\255\030\001\009\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\255\255\041\001\042\001\
\032\001\033\001\009\001\035\001\036\001\255\255\255\255\039\001\
\255\255\041\001\042\001\032\001\033\001\009\001\035\001\036\001\
\255\255\255\255\039\001\255\255\041\001\042\001\255\255\255\255\
\009\001\032\001\033\001\255\255\035\001\036\001\255\255\255\255\
\039\001\255\255\041\001\042\001\032\001\033\001\009\001\035\001\
\036\001\255\255\255\255\039\001\255\255\041\001\042\001\032\001\
\033\001\009\001\035\001\036\001\255\255\255\255\039\001\255\255\
\041\001\042\001\255\255\255\255\009\001\032\001\033\001\255\255\
\035\001\036\001\255\255\255\255\039\001\255\255\041\001\042\001\
\032\001\033\001\009\001\035\001\036\001\255\255\255\255\039\001\
\255\255\041\001\042\001\032\001\033\001\255\255\035\001\036\001\
\255\255\255\255\039\001\255\255\041\001\042\001\255\255\255\255\
\255\255\032\001\033\001\255\255\035\001\036\001\255\255\255\255\
\039\001\255\255\041\001\042\001"

let yynames_const = "\
  DBLSEMI\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  DPLUS\000\
  DMINUS\000\
  DTIMES\000\
  DDIV\000\
  CARAT\000\
  EXP\000\
  LT\000\
  GEQ\000\
  LEQ\000\
  GT\000\
  EQUALS\000\
  AND\000\
  OR\000\
  PIPE\000\
  ARROW\000\
  DCOLON\000\
  LET\000\
  REC\000\
  SEMI\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  LBRAC\000\
  RBRAC\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  UNIT\000\
  ERROR\000\
  EOF\000\
  TRY\000\
  WITH\000\
  UNDERSCORE\000\
  RAISE\000\
  HEAD\000\
  TAIL\000\
  PRINT\000\
  NEG\000\
  FST\000\
  SND\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  IDENT\000\
  OPCOM\000\
  CLCOM\000\
  SCLCOM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "student.mly"
               ( None )
# 674 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 42 "student.mly"
         ( Some _1 )
# 681 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 46 "student.mly"
                               ( (Anon _1) )
# 688 "student.ml"
               : Mp8common.toplvl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 47 "student.mly"
                                         ( TopLet (_2,_4) )
# 696 "student.ml"
               : Mp8common.toplvl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 48 "student.mly"
                                                    ( (TopRec (_3, _4, _6)) )
# 705 "student.ml"
               : Mp8common.toplvl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 53 "student.mly"
                      ( _1 )
# 712 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 54 "student.mly"
                             ( _2 )
# 719 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 55 "student.mly"
                                              ( (BinExp (Comma, _2, _4)) )
# 727 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "student.mly"
                ( ConExp Nil )
# 733 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_expression) in
    Obj.repr(
# 57 "student.mly"
                                ( _2 )
# 740 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_mono_expression) in
    Obj.repr(
# 58 "student.mly"
                         ( _1 )
# 747 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expression) in
    Obj.repr(
# 59 "student.mly"
                     ( _1 )
# 754 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 60 "student.mly"
                                              ( LetExp(_2, _4, _6) )
# 763 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 61 "student.mly"
                                                                     ( RecExp(_3, _4, _6, _8) )
# 773 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 62 "student.mly"
                                            ( AppExp(_1, _2) )
# 781 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 63 "student.mly"
                               ( FunExp(_2, _4) )
# 789 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 64 "student.mly"
                                                  ( IfExp(_2, _4, _6) )
# 798 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_expression) in
    Obj.repr(
# 65 "student.mly"
                      ( _1 )
# 805 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 66 "student.mly"
                     ( RaiseExp(_2) )
# 812 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 69 "student.mly"
               ( BinExp(Cons, _1, ConExp(Nil)) )
# 819 "student.ml"
               : 'list_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_expression) in
    Obj.repr(
# 70 "student.mly"
                                    ( BinExp(Cons, _1, _3) )
# 827 "student.ml"
               : 'list_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 73 "student.mly"
                              ( IfExp(_1, _3, ConExp(Bool false)) )
# 835 "student.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 74 "student.mly"
                              ( IfExp(_1, ConExp(Bool true), _3) )
# 843 "student.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 77 "student.mly"
                    ( MonExp (Head, _2) )
# 850 "student.ml"
               : 'list_mono_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 78 "student.mly"
                    ( MonExp (Tail, _2) )
# 857 "student.ml"
               : 'list_mono_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 79 "student.mly"
                    ( MonExp (Fst,  _2) )
# 864 "student.ml"
               : 'list_mono_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 80 "student.mly"
                    ( MonExp (Snd,  _2) )
# 871 "student.ml"
               : 'list_mono_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 83 "student.mly"
                                ( BinExp (Add, _1, _3) )
# 879 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 84 "student.mly"
                                ( BinExp (Sub, _1, _3) )
# 887 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 85 "student.mly"
                                ( BinExp (Div, _1, _3) )
# 895 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 86 "student.mly"
                                ( BinExp (Mul, _1, _3) )
# 903 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 87 "student.mly"
                                 ( BinExp (FAdd, _1, _3) )
# 911 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 88 "student.mly"
                                 ( BinExp (FSub, _1, _3) )
# 919 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 89 "student.mly"
                                 ( BinExp (FDiv, _1, _3) )
# 927 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 90 "student.mly"
                                 ( BinExp (FMul, _1, _3) )
# 935 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 91 "student.mly"
                              ( BinExp (Less, _1, _3) )
# 943 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 92 "student.mly"
                              ( BinExp (Less, _3, _1) )
# 951 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 93 "student.mly"
                                  ( BinExp (Eq, _3, _1) )
# 959 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 94 "student.mly"
                              ( IfExp (BinExp(Less, _1, _3), ConExp(Bool true), BinExp(Eq, _1, _3))  )
# 967 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 95 "student.mly"
                              ( IfExp (BinExp(Less, _3, _1), ConExp(Bool true), BinExp(Eq, _1, _3))  )
# 975 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 96 "student.mly"
                                 ( BinExp(Cons, _1, _3) )
# 983 "student.ml"
               : 'binop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "student.mly"
            ( VarExp _1 )
# 990 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 100 "student.mly"
                    ( ConExp (Bool _1) )
# 997 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "student.mly"
        ( ConExp (Int _1) )
# 1004 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 102 "student.mly"
          ( ConExp (Float _1) )
# 1011 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "student.mly"
           ( ConExp (String _1) )
# 1018 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "student.mly"
         ( ConExp Unit )
# 1024 "student.ml"
               : 'atomic_expression))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Mp8common.toplvl)
